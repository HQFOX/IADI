package pt.unl.fct.grantapp.StudentTests

import org.hamcrest.Matchers.equalTo
import org.junit.Test
import org.junit.runner.RunWith
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.test.context.junit4.SpringRunner
import pt.unl.fct.grantapp.model.dao.StudentDAO
import org.junit.Assert.assertThat
import pt.unl.fct.grantapp.model.InstitutionRepository
import pt.unl.fct.grantapp.model.StudentRepository
import javax.transaction.Transactional
import org.hamcrest.CoreMatchers.not
import org.junit.Assert
import org.junit.Assert.assertEquals
import pt.unl.fct.grantapp.model.dao.InstitutionDAO

@RunWith(SpringRunner::class)
@SpringBootTest
class StudentRepositoryTests {

    @Autowired
    lateinit var studentsRepository: StudentRepository

    @Autowired
    lateinit var institutionRepository: InstitutionRepository

    companion object Constants {
        val institution = InstitutionDAO(-1L,"name","birthday","ROLE_INSTITUTION","email","address","city",emptyList(), emptyList())

        var studentTest1 = StudentDAO(-1L, "", "", "ROLE_STUDENT",
                "Student1","03-02-1998", "suportp@fct.unl.pt", "address", "telephone", "city" , "postcode",
                institution, emptyList())
        var studentTest2 = StudentDAO(-1L, "", "", "ROLE_STUDENT",
                "Student2","birthday", "email", "address", "telephone", "city" , "postcode",
                institution, emptyList())
    }

    // IMPORTANT: the database is not cleaned between tests, it means that it will keep the pets
    // saved in previous tests

    @Test
    fun `Test findAll student`() {
        studentsRepository.deleteAll()
        assertThat(studentsRepository.findAll().toList(), equalTo(emptyList()))
    }

    @Test()
    @Transactional
    fun `Test SaveAll and FindAll students`() {

        saveData()
        assertEquals(studentsRepository.findAll().toList().size, 2)
    }

    @Test
    @Transactional
    // The default equals method needs to also compare the appointments,
    // so it needs to load a lazily referred collection.
    fun `Test on save and delete`() {
        var inst = institutionRepository.save(InstitutionDAO())

        studentsRepository.deleteAll()


        val studentTest = StudentDAO(-1L, "", "", "ROLE_STUDENT",
                "Student1","03-02-1998", "suportp@fct.unl.pt",
                "address", "telephone", "city" , "postcode",
                inst, emptyList())

        val s = studentsRepository.save(studentTest)
        assertThat(s.id, not(equalTo(studentTest.id)))//the id is different because it is generated by Spring
        assertThat(s.name, equalTo(studentTest.name))
        assertThat(s.email, equalTo(studentTest.email))

        assertThat(studentsRepository.findAll().toList(), equalTo(listOf<StudentDAO>(s)))

        studentsRepository.delete(s);

        assertThat(studentsRepository.findAll().toList(), equalTo(emptyList()))
    }

    @Test
    @Transactional
    fun `another test on save and delete`() {
        saveData()

        studentsRepository.deleteAll()

        val s0 = studentsRepository.save(studentTest1)
        assertThat(s0.id, not(equalTo(studentTest1.id)))//the id is different because it is generated by Spring
        assertThat(s0.name, equalTo(studentTest1.name))
        assertThat(s0.email, equalTo(studentTest1.email))

        assertThat(studentsRepository.findAll().toList(), equalTo(listOf(s0)))

        val s1 = studentsRepository.save(studentTest2)
        assertThat(s1.id, not(equalTo(studentTest2.id)))//the id is different because it is generated by Spring
        assertThat(s1.name, equalTo(studentTest2.name))
        assertThat(s1.email, equalTo(studentTest2.email))

        assertThat(studentsRepository.findAll().toList(), equalTo(listOf(s0, s1)))

        studentsRepository.delete(s0)

        assertThat(studentsRepository.findAll().toList(), equalTo(listOf(s1)))

        studentsRepository.delete(s1)

        assertThat(studentsRepository.findAll().toList(), equalTo(emptyList()))
    }

    fun saveData() {
        var inst = institutionRepository.save(InstitutionDAO())

        studentTest1 = StudentDAO(-1L, "", "", "ROLE_STUDENT",
                "Student1","03-02-1998", "suportp@fct.unl.pt",
                "address", "telephone", "city" , "postcode",
                inst, emptyList())

        studentTest2 = StudentDAO(-1L, "", "", "ROLE_STUDENT",
                "Student2","03-02-1998", "suportp@fct.unl.pt",
                "address", "telephone", "city" , "postcode",
                inst, emptyList())

        studentsRepository.save(studentTest1)
        studentsRepository.save(studentTest1)

    }


}